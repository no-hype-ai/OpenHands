From a7b9a4f2914c61c90d716335062ddbfb542a4a72 Mon Sep 17 00:00:00 2001
From: Hiep Le <69354317+hieptl@users.noreply.github.com>
Date: Fri, 19 Sep 2025 22:27:55 +0700
Subject: [PATCH 06/12] refactor(frontend): migration of status-slice.ts to
 zustand (#11017)

---
 .../features/controls/agent-status.tsx        |  3 +-
 .../src/services/__tests__/actions.test.ts    | 29 ++++++++++++++-----
 frontend/src/services/actions.ts              | 10 +++----
 frontend/src/state/status-slice.ts            | 25 ----------------
 frontend/src/state/status-store.ts            | 20 +++++++++++++
 frontend/src/store.ts                         |  2 --
 6 files changed, 47 insertions(+), 42 deletions(-)
 delete mode 100644 frontend/src/state/status-slice.ts
 create mode 100644 frontend/src/state/status-store.ts

diff --git a/frontend/src/components/features/controls/agent-status.tsx b/frontend/src/components/features/controls/agent-status.tsx
index 9ff8bb9f2..6870bc924 100644
--- a/frontend/src/components/features/controls/agent-status.tsx
+++ b/frontend/src/components/features/controls/agent-status.tsx
@@ -2,6 +2,7 @@ import { useTranslation } from "react-i18next";
 import { useSelector, useDispatch } from "react-redux";
 import { useEffect } from "react";
 import { RootState } from "#/store";
+import { useStatusStore } from "#/state/status-store";
 import { useWsClient } from "#/context/ws-client-provider";
 import { useActiveConversation } from "#/hooks/query/use-active-conversation";
 import { getStatusCode } from "#/utils/status";
@@ -30,7 +31,7 @@ export function AgentStatus({
   const { t } = useTranslation();
   const dispatch = useDispatch();
   const { curAgentState } = useSelector((state: RootState) => state.agent);
-  const { curStatusMessage } = useSelector((state: RootState) => state.status);
+  const { curStatusMessage } = useStatusStore();
   const { webSocketStatus } = useWsClient();
   const { data: conversation } = useActiveConversation();
 
diff --git a/frontend/src/services/__tests__/actions.test.ts b/frontend/src/services/__tests__/actions.test.ts
index 20a834a5d..9ea7fa5fb 100644
--- a/frontend/src/services/__tests__/actions.test.ts
+++ b/frontend/src/services/__tests__/actions.test.ts
@@ -3,7 +3,7 @@ import { handleStatusMessage } from "../actions";
 import { StatusMessage } from "#/types/message";
 import { queryClient } from "#/query-client-config";
 import store from "#/store";
-import { setCurStatusMessage } from "#/state/status-slice";
+import { useStatusStore } from "#/state/status-store";
 import { trackError } from "#/utils/error-handler";
 
 // Mock dependencies
@@ -19,8 +19,12 @@ vi.mock("#/store", () => ({
   },
 }));
 
-vi.mock("#/state/status-slice", () => ({
-  setCurStatusMessage: vi.fn(),
+vi.mock("#/state/status-store", () => ({
+  useStatusStore: {
+    getState: vi.fn(() => ({
+      setCurStatusMessage: vi.fn(),
+    })),
+  },
 }));
 
 vi.mock("#/state/chat-slice", () => ({
@@ -61,7 +65,7 @@ describe("handleStatusMessage", () => {
     expect(store.dispatch).not.toHaveBeenCalled();
   });
 
-  it("should dispatch setCurStatusMessage for info messages without conversation_title", () => {
+  it("should call setCurStatusMessage for info messages without conversation_title", () => {
     // Create a status message without a conversation title
     const statusMessage: StatusMessage = {
       status_update: true,
@@ -69,13 +73,22 @@ describe("handleStatusMessage", () => {
       message: "Some info message",
     };
 
+    const mockSetCurStatusMessage = vi.fn();
+    vi.mocked(useStatusStore.getState).mockReturnValue({
+      setCurStatusMessage: mockSetCurStatusMessage,
+      curStatusMessage: {
+        status_update: true,
+        type: "info",
+        id: "",
+        message: "",
+      },
+    });
+
     // Call the function
     handleStatusMessage(statusMessage);
 
-    // Verify that store.dispatch was called with setCurStatusMessage
-    expect(store.dispatch).toHaveBeenCalledWith(
-      setCurStatusMessage(statusMessage),
-    );
+    // Verify that setCurStatusMessage was called with the correct message
+    expect(mockSetCurStatusMessage).toHaveBeenCalledWith(statusMessage);
 
     // Verify that queryClient.invalidateQueries was not called
     expect(queryClient.invalidateQueries).not.toHaveBeenCalled();
diff --git a/frontend/src/services/actions.ts b/frontend/src/services/actions.ts
index dd5c92eab..621802052 100644
--- a/frontend/src/services/actions.ts
+++ b/frontend/src/services/actions.ts
@@ -1,6 +1,6 @@
 import { trackError } from "#/utils/error-handler";
 import { appendSecurityAnalyzerInput } from "#/state/security-analyzer-slice";
-import { setCurStatusMessage } from "#/state/status-slice";
+import { useStatusStore } from "#/state/status-store";
 import { setMetrics } from "#/state/metrics-slice";
 import store from "#/store";
 import ActionType from "#/types/action-type";
@@ -52,11 +52,9 @@ export function handleStatusMessage(message: StatusMessage) {
       queryKey: ["user", "conversation", conversationId],
     });
   } else if (message.type === "info") {
-    store.dispatch(
-      setCurStatusMessage({
-        ...message,
-      }),
-    );
+    useStatusStore.getState().setCurStatusMessage({
+      ...message,
+    });
   } else if (message.type === "error") {
     trackError({
       message: message.message,
diff --git a/frontend/src/state/status-slice.ts b/frontend/src/state/status-slice.ts
deleted file mode 100644
index d242017ac..000000000
--- a/frontend/src/state/status-slice.ts
+++ /dev/null
@@ -1,25 +0,0 @@
-import { createSlice, PayloadAction } from "@reduxjs/toolkit";
-import { StatusMessage } from "#/types/message";
-
-const initialStatusMessage: StatusMessage = {
-  status_update: true,
-  type: "info",
-  id: "",
-  message: "",
-};
-
-export const statusSlice = createSlice({
-  name: "status",
-  initialState: {
-    curStatusMessage: initialStatusMessage,
-  },
-  reducers: {
-    setCurStatusMessage: (state, action: PayloadAction<StatusMessage>) => {
-      state.curStatusMessage = action.payload;
-    },
-  },
-});
-
-export const { setCurStatusMessage } = statusSlice.actions;
-
-export default statusSlice.reducer;
diff --git a/frontend/src/state/status-store.ts b/frontend/src/state/status-store.ts
new file mode 100644
index 000000000..b692c098a
--- /dev/null
+++ b/frontend/src/state/status-store.ts
@@ -0,0 +1,20 @@
+import { create } from "zustand";
+import { StatusMessage } from "#/types/message";
+
+const initialStatusMessage: StatusMessage = {
+  status_update: true,
+  type: "info",
+  id: "",
+  message: "",
+};
+
+interface StatusState {
+  curStatusMessage: StatusMessage;
+  setCurStatusMessage: (message: StatusMessage) => void;
+}
+
+export const useStatusStore = create<StatusState>((set) => ({
+  curStatusMessage: initialStatusMessage,
+  setCurStatusMessage: (message: StatusMessage) =>
+    set({ curStatusMessage: message }),
+}));
diff --git a/frontend/src/store.ts b/frontend/src/store.ts
index 92985351e..9c762fa9e 100644
--- a/frontend/src/store.ts
+++ b/frontend/src/store.ts
@@ -5,7 +5,6 @@ import fileStateReducer from "./state/file-state-slice";
 import commandReducer from "./state/command-slice";
 import { jupyterReducer } from "./state/jupyter-slice";
 import securityAnalyzerReducer from "./state/security-analyzer-slice";
-import statusReducer from "./state/status-slice";
 import metricsReducer from "./state/metrics-slice";
 import microagentManagementReducer from "./state/microagent-management-slice";
 import conversationReducer from "./state/conversation-slice";
@@ -18,7 +17,6 @@ export const rootReducer = combineReducers({
   agent: agentReducer,
   jupyter: jupyterReducer,
   securityAnalyzer: securityAnalyzerReducer,
-  status: statusReducer,
   metrics: metricsReducer,
   microagentManagement: microagentManagementReducer,
   conversation: conversationReducer,
-- 
2.34.1


From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Penguin Dev <dev@penguin.ai>
Date: Fri, 19 Sep 2025 14:30:00 -0400
Subject: [PATCH 13/13] Fix Docker mode microagent workspace path mismatch

This patch fixes the issue where user microagents fail to load in Docker mode
due to workspace path mismatch. The runtime looks for microagents in 
/openhands/code/.openhands/microagents/ but they are actually mounted at
/workspace/.openhands/microagents/.

The solution implements multi-path microagent loading that searches both
the container working directory and the mounted workspace directory.

Fixes: Docker Mode Microagents Not Loading: Workspace Path Mismatch
GitHub Issue: https://github.com/no-hype-ai/penguin/issues/4
---
 openhands/runtime/base.py | 67 +++++++++++++++++++++++++++++++++------
 1 file changed, 57 insertions(+), 10 deletions(-)

diff --git a/openhands/runtime/base.py b/openhands/runtime/base.py
index 48ff2882d..2d4b8c3e1 100644
--- a/openhands/runtime/base.py
+++ b/openhands/runtime/base.py
@@ -821,6 +821,57 @@ class Runtime(FileEditRuntimeMixin):
 
         return loaded_microagents
 
+    def _get_docker_aware_microagent_paths(
+        self, selected_repository: str | None
+    ) -> list[Path]:
+        """Get potential microagent paths with Docker workspace awareness.
+        
+        In Docker mode, microagents might be in different locations:
+        - Container working dir: /openhands/code/.openhands/microagents/
+        - Mounted workspace: /workspace/.openhands/microagents/
+        - User home: ~/.openhands/microagents/
+        
+        Args:
+            selected_repository: Repository name if specified
+            
+        Returns:
+            List of potential microagent directory paths to search
+        """
+        microagent_search_paths = []
+        
+        if selected_repository:
+            # Repository-specific paths
+            repo_name = selected_repository.split('/')[-1]
+            repo_root_candidates = [
+                self.workspace_root / repo_name,
+                Path('/workspace') / repo_name,  # Docker mounted workspace
+                Path('/openhands/code') / repo_name,  # Docker working dir
+            ]
+            for repo_root in repo_root_candidates:
+                microagent_search_paths.append(repo_root / '.openhands' / 'microagents')
+        else:
+            # Workspace root paths  
+            workspace_candidates = [
+                self.workspace_root,
+                Path('/workspace'),  # Docker mounted workspace
+                Path('/openhands/code'),  # Docker working directory
+                Path.home(),  # User home directory
+            ]
+            for workspace in workspace_candidates:
+                microagent_search_paths.append(workspace / '.openhands' / 'microagents')
+        
+        # Remove duplicates while preserving order
+        seen = set()
+        return [p for p in microagent_search_paths if not (p in seen or seen.add(p))]
+
+    def _is_docker_runtime(self) -> bool:
+        """Detect if running in Docker runtime environment."""
+        return (
+            Path('/openhands/code').exists() and 
+            os.environ.get('SANDBOX_RUNTIME_CONTAINER_IMAGE') is not None
+        )
+
     def get_microagents_from_selected_repo(
         self, selected_repository: str | None
     ) -> list[BaseMicroagent]:
@@ -836,18 +887,25 @@ class Runtime(FileEditRuntimeMixin):
         since GitLab doesn't support repository names starting with non-alphanumeric
         characters.
         """
         loaded_microagents: list[BaseMicroagent] = []
-        microagents_dir = self.workspace_root / '.openhands' / 'microagents'
-        repo_root = None
+        
+        # Use Docker-aware path resolution
+        if self._is_docker_runtime():
+            microagent_search_paths = self._get_docker_aware_microagent_paths(selected_repository)
+        else:
+            # Original behavior for non-Docker runtimes
+            if selected_repository:
+                repo_name = selected_repository.split('/')[-1]
+                repo_root = self.workspace_root / repo_name
+                microagent_search_paths = [repo_root / '.openhands' / 'microagents']
+            else:
+                microagent_search_paths = [self.workspace_root / '.openhands' / 'microagents']
 
         # Check for user/org level microagents if a repository is selected
         if selected_repository:
             # Load microagents from the org/user level repository
             org_microagents = self.get_microagents_from_org_or_user(selected_repository)
             loaded_microagents.extend(org_microagents)
-
-            # Continue with repository-specific microagents
-            repo_root = self.workspace_root / selected_repository.split('/')[-1]
-            microagents_dir = repo_root / '.openhands' / 'microagents'
+        
+        # Try each potential microagent directory
+        microagents_dir = None
+        for candidate_dir in microagent_search_paths:
+            if candidate_dir.exists():
+                microagents_dir = candidate_dir
+                self.log(
+                    'info',
+                    f'Found microagents directory at: {microagents_dir} (Docker aware: {self._is_docker_runtime()})'
+                )
+                break
+        
+        # Handle case where no microagent directory is found
+        if microagents_dir is None:
+            self.log(
+                'debug',
+                f'No microagents directory found. Searched paths: {microagent_search_paths}'
+            )
+            return loaded_microagents
+        
+        repo_root = microagents_dir.parent.parent if microagents_dir else None

         self.log(
             'info',
@@ -886,8 +944,8 @@ class Runtime(FileEditRuntimeMixin):
             )
 
         # Load microagents from directory
-        repo_microagents = self._load_microagents_from_directory(
-            microagents_dir, 'repository'
-        )
-        loaded_microagents.extend(repo_microagents)
+        if microagents_dir and microagents_dir.exists():
+            repo_microagents = self._load_microagents_from_directory(
+                microagents_dir, 'repository'
+            )
+            loaded_microagents.extend(repo_microagents)

         return loaded_microagents
-- 
2.45.2